{"title":"Hexo + Github + Travis CI 搭建博客","uid":"8ddaff0deee2100e29c223d03814e455","slug":"hello-world","date":"2021-09-28T15:10:37.400Z","updated":"2021-09-30T14:14:02.204Z","comments":true,"path":"api/articles/hello-world.json","keywords":null,"cover":null,"content":"<p>使用Hexo搭建个人博客其实已经有一段时间，但是由于种种原因被搁置了很久（~PS：其实就是因为太懒了）。<br>明天就是国庆节了，赶在假期前给自己加加班，哈哈哈！<br>好了，闲话不多说，我们直接上干货！</p>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><ul>\n<li><a href=\"https://nodejs.org/en/\">nodejs</a>  在官网找到对应系统版本下载即可，前端的小伙伴应该都不陌生了~</li>\n<li><a href=\"https://git-scm.com/\">git</a>  同上，下载安装！！！程序员必备技能，如果没有学过的小伙伴，建议先学一学哦！</li>\n<li><a href=\"https://github.com/\">github</a>  开源万岁！</li>\n</ul>\n<h2 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h2><p>在github上建立一个<code>username.github.io</code>的仓库（~ps：这里username并非真的是username，而是你的github用户名，例如我的就是：xiaoming985.github.io，切记要用用户名同名哦！）</p>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p>下载安装好nodejs之后，打开cmd命令行，使用如下命令安装hexo-cli</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo-cli -g<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>安装好之后，使用hexo -v查看是否成功</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo -v<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后，开始创建本地博客环境（folderName指定项目名称，可选，不指定，则在当前路径下搭建初始化项目）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo init <span class=\"token punctuation\">[</span>folderName<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行成功后，启动项目（简写hexo s），然后你就可以在浏览器中输入<a href=\"http://localhost:4000/\">localhost:4000</a>看到你的博客啦！</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>生成静态页面文件（简写hexo g），使用该命令可以将编写好的博文转成静态页面</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后修改项目配置文件<code>_config.yml</code>，找到deploy修改如下（repo url要用你上面建立的仓库的地址哦!）</p>\n<pre class=\"line-numbers language-yml\" data-language=\"yml\"><code class=\"language-yml\">deploy:\n  type: git\n  repo:  https:&#x2F;&#x2F;...... # repo url\n  branch: main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然后部署(简写hexo d)，运行成功后，你就可以通过浏览器打开 <a href=\"https://username.github.io/\">https://username.github.io</a> 看到你的博客了~</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"Travis-CI自动部署\"><a href=\"#Travis-CI自动部署\" class=\"headerlink\" title=\"Travis CI自动部署\"></a>Travis CI自动部署</h2><p>细心的小伙伴可能已经发现了，github远程仓库上并没有保存我们编写的博客源码，而是保存了构建后的静态页面。<br>那么，问题来了，如果我们换了个环境呢？（比如换了一部电脑，我想继续写博客怎么办？）<br>我能不能既保存源码，又部署静态页面呢？（答案是可以的，小孩子才做选择！）</p>\n<ul>\n<li>用github托管源码，然后我们就可以在多个环境中通过clone获取我们的博客源码了，妙啊！</li>\n<li>然后通过新分支来部署我们的博客页面，真实妙蛙种子到了米奇妙妙屋，秒到家了！</li>\n</ul>\n<p>步骤：</p>\n<ul>\n<li>将博客源码使用git上传到远程仓库，这里你可以上传至一个新的独立仓库，也可以直接使用<code>username.github.io</code>进行托管</li>\n<li>然后将 <a href=\"https://github.com/marketplace/travis-ci\">Travis CI</a> 添加到你的 GitHub 账户中。</li>\n<li>前往 GitHub 的 <a href=\"https://github.com/settings/installations\">Applications settings</a>，配置 Travis CI 权限，使其能够访问你的 repository。</li>\n<li>接下来，在 github -&gt; setting -&gt; Developer Settings -&gt; Personal access tokens 中点击Generate new token按钮生成一个token（只勾选 repo 的权限即可），生成后记得要copy下来哦，等下会用到。切记，不要泄漏！<a href=\"https://github.com/settings/tokens\">Personal access tokens传送门</a></li>\n<li>回到 Travis CI，前往你的 repository 的设置页面，在 Environment Variables 下新建一个环境变量，Name 为 <code>GH_TOKEN</code>，Value 为刚才你在 GitHub 生成的 Token。确保 DISPLAY VALUE IN BUILD LOG 保持 不被勾选 避免你的 Token 泄漏。点击 Add 保存。</li>\n<li>回到你的博客项目，在项目根目录下添加<code>.travis.yml</code>配置文件，配置如下：<pre class=\"line-numbers language-yml\" data-language=\"yml\"><code class=\"language-yml\"># 指定语言环境\nlanguage: node_js\n# 指定需要sudo权限\nsudo: false # required\n# 指定node_js版本\nnode_js: \n  - 12\n# 指定缓存模块，可选。缓存可加快编译速度。\ncache: npm\n\n# 指定博客源码分支，因人而异。hexo博客源码托管在独立repo则不用设置此项\nbranches:\n  only:\n    - main \n\nbefore_install:\n  - npm install -g hexo-cli\n\n# Start: Build Lifecycle\ninstall:\n  - npm install\n  - npm install hexo-deployer-git --save\n\n# 执行清缓存，生成网页操作\nscript:\n  - hexo clean\n  - hexo generate\n\ndeploy:\n  provider: pages\n  skip-cleanup: true\n  github-token: $GH_TOKEN\n  keep-history: true\n  on:\n    branch: main\n  local-dir: public\n# End: Build LifeCycle<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>然后修改<code>_config.yml</code>，如下：(替换username即可)，以下配置即构建后将静态文件推送指<code>gh-pages分支</code><pre class=\"line-numbers language-yml\" data-language=\"yml\"><code class=\"language-yml\">deploy:\n  type: git\n  repo: https:&#x2F;&#x2F;gh_token@github.com&#x2F;username&#x2F;username.github.io.git\n  branch: gh-pages<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>完成后，将修改后的<code>_config.yml</code>以及<code>.travis.yml</code>推送指远程托管仓库，随后，Travis CI就会自己开始工作了，稍等片刻便可以发现远程仓库多了一个新的分支<code>gh-pages</code></li>\n<li>在 GitHub 中前往你的 repository 的设置页面，修改 GitHub Pages 的部署分支为 gh-pages。</li>\n<li>稍等片刻，你就又能通过浏览器打开 <a href=\"https://username.github.io/\">https://username.github.io</a> 看到你的博客啦~</li>\n</ul>\n<h2 id=\"更多的项目展示\"><a href=\"#更多的项目展示\" class=\"headerlink\" title=\"更多的项目展示\"></a>更多的项目展示</h2><p>有的小伙伴可能又有问题了，github.io用来部署博客了，那我还能部署别的项目吗？答案是可以的，将我们构建（<code>npm run build</code>等）好之后的项目，推送到远程的<code>gh-pages</code>分支即可。开搞！</p>\n<ul>\n<li>使用自动部署，可参考如下配置：<pre class=\"line-numbers language-yml\" data-language=\"yml\"><code class=\"language-yml\"># 指定语言环境\nlanguage: node_js\n# 指定需要sudo权限\nsudo: false # required\n# 指定node_js版本\nnode_js: \n  - 12\n# 指定缓存模块，可选。缓存可加快编译速度。\ncache: \n  directories:\n    - node_modules\n\n# 指定博客源码分支，因人而异。hexo博客源码托管在独立repo则不用设置此项\nbranches:\n  only:\n    - main \n\nbefore_install:\n  - npm install -g yarn\n\n# Start: Build Lifecycle\n\ninstall:\n  - yarn\n\n# 执行清缓存，生成网页操作\nscript:\n  - yarn build\n\n# 设置git提交名，邮箱；替换真实token到_config.yml文件，最后deploy部署\nafter_script:\n  \n\n# End: Build LifeCycle\n\ndeploy:\n  provider: pages\n  skip-cleanup: true\n  github-token: $GH_TOKEN\n  local-dir: .&#x2F;dist\n  keep-history: true\n  on:\n    branch: main\n  local-dir: public<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>手动推送，如下命令，即将构建好的<code>dist</code>目录推送到远端的<code>gh-pages</code>分支<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> subtree push --prefix<span class=\"token operator\">=</span>dist origin gh-pages<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>PS：手动部署有小注意点<ul>\n<li><code>/dist</code> 目录需要被 git 记录，于是后面我们才可以用它作为子树（subtree），因此 <code>/dist</code> 不能被 <code>.gitignore</code> 规则排除</li>\n<li>dist 代表子树所在的目录名</li>\n<li>origin 是 remote name</li>\n<li>gh-pages 是目标分支名称</li>\n</ul>\n</li>\n</ul>\n","text":"使用Hexo搭建个人博客其实已经有一段时间，但是由于种种原因被搁置了很久（~PS：其实就是因为太懒了）。明天就是国庆节了，赶在假期前给自己加加班，哈哈哈！好了，闲话不多说，我们直接上干货！ 环境准备 nodejs 在官网找到对应系统版本下载即可，前端的小伙伴应该都不陌生了~ gi...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87\"><span class=\"toc-text\">环境准备</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Github\"><span class=\"toc-text\">Github</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Hexo\"><span class=\"toc-text\">Hexo</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Travis-CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">Travis CI自动部署</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E5%A4%9A%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%B1%95%E7%A4%BA\"><span class=\"toc-text\">更多的项目展示</span></a></li></ol>","author":{"name":"Xiaoming985","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/49241258?v=4","link":"/","description":"以梦为马，不负韶华","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{}}